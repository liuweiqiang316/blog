import{_ as r,X as i,Y as n,Z as a,$ as t,a0 as c,a1 as d,E as p}from"./framework-23afdf50.js";const o={},h=d('<p>#领域/编程/前端/JavaScript</p><h2 id="unicode与javascript" tabindex="-1"><a class="header-anchor" href="#unicode与javascript" aria-hidden="true">#</a> Unicode与JavaScript</h2><p>keywords：字符集、Unicode、码点、字节、bit、JavaScript、ASCII、UTF-32、UTF-16、UTF-8、</p><p>字符集：字符的集合</p><p>字节：个人理解是一个字符在计算机中是按节存储的</p><h3 id="unicode是什么" tabindex="-1"><a class="header-anchor" href="#unicode是什么" aria-hidden="true">#</a> Unicode是什么</h3><p>Unicode是一个字符集。愿景是容纳所有字符。</p><p>ASCII是Unicode的一个子集，码点范围是0~127。</p><p>Unicode从0开始为每一个字符指定一个编号 -- 码点（code point）。</p><p>比如码点为0的符号是null（表示所有二进制位都是0），U+0000 = null</p><p>Unicode收录了很多字符，不是一次性定义的，而是分区定义。每个区有65536（2<sup>16）个字符，称为一个平面（plane）。目前，Unicode一共有17个平面（总容量为：2</sup>21），每个平面的容量是2^16个字符。其中1个基本平面（U+0000<sub>U+FFFF），16个辅助平面（U+010000</sub>U+10FFFF）。</p><h3 id="字符编码" tabindex="-1"><a class="header-anchor" href="#字符编码" aria-hidden="true">#</a> 字符编码</h3><p>Unicode只规定了字符的码点，只是建立了字符与码点的映射关系。字符还是以二进制的形式存储在计算机中，多个字符以二进制排在一起，就像文本没有标点一样，读取时不知道具体哪个或哪几个字节代表一个字符。为了计算机能正确处理二进制化的字符，就需要告诉计算机二进制化的字符是以什么规则排列的，这样计算机就能正确的识别字符，这种规则就是字符编码规则。比较常见的字符编码规则有：UTF-32、UTF-16、UTF-8、GB2312、GBK、Big5。</p><p>计算机中数据都是以二进制的形式存储的，即0、1的形式。其中一个bit位的高低电平可以表示0、1。在字节的存储中，一个字节有8bit，可以表示的数据容量是2^8。</p><h3 id="utf-32与utf-8" tabindex="-1"><a class="header-anchor" href="#utf-32与utf-8" aria-hidden="true">#</a> UTF-32与UTF-8</h3><p>UTF-32编码就是用四个字节表示一个字符。优点：查找效率高，时间复杂度O(1)，缺点：浪费空间。人们真正需要的是一种节省空间的编码，UTF-8就此诞生。UTF-8是一种变长的编码方法，字符长度从1个字节到4个字节不等。越常用的字符，字节越短，比如最前面的128个字符，只使用1个字节表示，兼容ASCII码。</p><h3 id="utf-16简介" tabindex="-1"><a class="header-anchor" href="#utf-16简介" aria-hidden="true">#</a> UTF-16简介</h3><p>UTF-16编码介于UTF-32与UTF-8之间，同时结合了定长和变长两种编码方法的特点。</p><p>它的编码规则很简单：基本平面的字符占用2个字节，辅助平面的字符占用4个字节。<strong>也就是说，UTF-16的编码长度要么是2个字节（U+0000到U+FFFF），要么是4个字节（U+010000到U+10FFFF）。</strong></p><p>于是就有一个问题，当我们遇到两个字节，怎么看出它本身是一个字符，还是需要跟其他两个字节放在一起解读？</p><p>说来很巧妙，我也不知道是不是故意的设计，在基本平面内，从U+D800到U+DFFF是一个空段，即这些码点不对应任何字符。因此，这个空段可以用来映射辅助平面的字符。</p><p>具体来说，辅助平面的字符位共有220个，也就是说，对应这些字符至少需要20个二进制位。UTF-16将这20位拆成两半，前10位映射在U+D800到U+DBFF（空间大小210），称为高位（H），后10位映射在U+DC00到U+DFFF（空间大小210），称为低位（L）。这意味着，一个辅助平面的字符，被拆成两个基本平面的字符表示。</p><p><strong>所以，当我们遇到两个字节，发现它的码点在U+D800到U+DBFF之间，就可以断定，紧跟在后面的两个字节的码点，应该在U+DC00到U+DFFF之间，这四个字节必须放在一起解读。</strong></p><h3 id="utf-16转码公式" tabindex="-1"><a class="header-anchor" href="#utf-16转码公式" aria-hidden="true">#</a> UTF-16转码公式</h3><h3 id="javascript编码" tabindex="-1"><a class="header-anchor" href="#javascript编码" aria-hidden="true">#</a> JavaScript编码</h3><p>JS的编码方式是UCS-2。之前有两个想统一字符集的团队：Unicode、UCS。最后两个字符集合并为一个Unicode。但是JS诞生时，最新的字符编码是UCS-2，UTF-16还没制定，所以JS采用了UCS-2。而之后的UTF-16是UCS-2的超集。UCS-2编码使用2个字节表示一个字符（当时没有那么多字符，只有一个基本平面）。</p><p>**由于JavaScript只能处理UCS-2编码，造成所有字符在这门语言中都是2个字节，如果是4个字节的字符，会当作两个双字节的字符处理。**JavaScript的字符函数都受到这一点的影响，无法返回正确结果。</p><h3 id="es6" tabindex="-1"><a class="header-anchor" href="#es6" aria-hidden="true">#</a> ES6</h3><p>JavaScript从ES6开始，增强了对Unicode支持，基本解决了4个字节长度的字符问题。</p><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h3>',30),U={href:"http://www.ruanyifeng.com/blog/2014/12/unicode.html",target:"_blank",rel:"noopener noreferrer"};function s(F,u){const e=p("ExternalLinkIcon");return i(),n("div",null,[h,a("p",null,[a("a",U,[t("Unicode与JavaScript详解-阮一峰"),c(e)])])])}const f=r(o,[["render",s],["__file","Unicode与JavaScript.html.vue"]]);export{f as default};
